AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NameThinking Lambda Version.
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300

Parameters:
  StageEnv:
    Type: String
    Description: Environment
    Default: dev
  CodicToken:
    Type: String
    Description: Codic API Token

Resources:
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref NameThinkingFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"

  NameThinkingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: name-thinking/
      Handler: app.lambdaHandler
      Runtime: nodejs8.10
      Policies:
        - CloudWatchPutMetricPolicy: {}
      Environment:
        Variables:
          CODIC_TOKEN: !Ref CodicToken
      Events:
        NameThinking:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref NameThinkingApi
            Path: /name_thinking
            Method: post

  NameThinkingApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "NameThinkingAPI-${StageEnv}"
      StageName: !Ref StageEnv
      DefinitionBody:
        swagger: 2.0
        schemes:
          - https
        basePath: !Sub "/${StageEnv}"
        paths:
          /name_thinking:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  descriptions: 200 response
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NameThinkingFunction.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
            options:
              summary: CORS support
              description: |
                Enable CORS by returning correct headers
              consumes:
                - application/json
              produces:
                - application/json
              tags:
                - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
